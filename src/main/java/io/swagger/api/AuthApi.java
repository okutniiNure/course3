/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Credential;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

@Validated
public interface AuthApi {

    @Operation(summary = "creates an account", description = "Adds an account to the system")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Account created"),

            @ApiResponse(responseCode = "400", description = "Invalid input, object invalid"),

            @ApiResponse(responseCode = "409", description = "An existing account already exists")})
    @RequestMapping(value = "/auth/signup",
            consumes = {"application/json"},
            method = RequestMethod.POST)
    public void createAccount(@Parameter(in = ParameterIn.DEFAULT, description = "account to save", schema = @Schema()) @Valid @RequestBody Credential body,
                              @Parameter(in = ParameterIn.DEFAULT) HttpServletResponse response);

    @Operation(summary = "confirm an account", description = "Confirms an account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Confirmed"),

            @ApiResponse(responseCode = "400", description = "Invalid token")})
    @RequestMapping(value = "/auth/confirmation",
            method = RequestMethod.GET)
    public String confirmAccount(@Parameter(in = ParameterIn.QUERY, description = "token to confirm the credentials", schema = @Schema())
                                 @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "gets account", description = "Obtain information about specific account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Credential.class))),

            @ApiResponse(responseCode = "404", description = "No such account")})
    @RequestMapping(value = "/account/{accountId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    public Credential getAccountById(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "Authorization", required = true) String authorization,
                                     @Parameter(in = ParameterIn.PATH, description = "The ID of the accountId", required = true, schema = @Schema()) @PathVariable("accountId") Long accountId);

    @Operation(summary = "updates account", description = "update information about specific account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success"),

            @ApiResponse(responseCode = "404", description = "No such account")})
    @RequestMapping(value = "/account/{accountId}",
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    public void updateAccountById(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "Authorization", required = true) String authorization,
                                  @Parameter(in = ParameterIn.PATH, description = "The ID of the account", required = true, schema = @Schema()) @PathVariable(value = "accountId") Long accountId,
                                  @Parameter(in = ParameterIn.DEFAULT, description = "account to update", schema = @Schema()) @Valid @RequestBody Credential body);

    @Operation(summary = "deletes account", description = "delete information about specific account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success")})
    @RequestMapping(value = "/account/{accountId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    public void deleteAccountById(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "Authorization", required = true) String authorization,
                                  @Parameter(in = ParameterIn.PATH, description = "The ID of the account", required = true, schema = @Schema()) @PathVariable("accountId") Long accountId);

    @Operation(summary = "gets account", description = "Obtain information about specific account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Credential.class))),

            @ApiResponse(responseCode = "404", description = "No such account")})
    @RequestMapping(value = "/account/profile",
            produces = {"application/json"},
            method = RequestMethod.GET)
    public Credential getLoginedAccount(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "Authorization", required = true) String authorization);

    @Operation(summary = "updates account", description = "update information about specific account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success"),

            @ApiResponse(responseCode = "404", description = "No such account")})
    @RequestMapping(value = "/account/profile",
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    public void updateLoginedAccount(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "Authorization", required = true) String authorization,
                                     @Parameter(in = ParameterIn.DEFAULT, description = "account to update", schema = @Schema()) @Valid @RequestBody Credential body);

    @Operation(summary = "deletes account", description = "delete information about specific account")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success")})
    @RequestMapping(value = "/account/profile",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    public void deleteLoginedAccount(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "Authorization", required = true) String authorization);
}

